{"version":3,"file":"RTCSctpTransport.cjs","sources":["../../../src/polyfill/RTCSctpTransport.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport RTCDtlsTransport from './RTCDtlsTransport';\n\nexport default class RTCSctpTransport extends EventTarget implements globalThis.RTCSctpTransport {\n    #pc: globalThis.RTCPeerConnection = null;\n    #extraFunctions = null;\n    #transport: globalThis.RTCDtlsTransport = null;\n\n    onstatechange: ((this: globalThis.RTCSctpTransport, ev: Event) => any) | null = null;\n\n    constructor(initial: { pc: globalThis.RTCPeerConnection, extraFunctions }) {\n        super();\n        this.#pc = initial.pc;\n        this.#extraFunctions = initial.extraFunctions;\n\n        this.#transport = new RTCDtlsTransport({ pc: initial.pc, extraFunctions: initial.extraFunctions });\n\n        // forward peerConnection events\n        this.#pc.addEventListener('connectionstatechange', () => {\n            this.dispatchEvent(new Event('statechange'));\n        });\n\n        // forward events to properties\n        this.addEventListener('statechange', (e) => {\n            if (this.onstatechange) this.onstatechange(e);\n        });\n    }\n\n    get maxChannels(): number | null {\n        if (this.state !== 'connected') return null;\n        return this.#pc ? this.#extraFunctions.maxDataChannelId() : 0;\n    }\n\n    get maxMessageSize(): number {\n        if (this.state !== 'connected') return null;\n        return this.#pc ? this.#extraFunctions.maxMessageSize() : 0;\n    }\n\n    get state(): globalThis.RTCSctpTransportState {\n        // reduce state from new, connecting, connected, disconnected, failed, closed, unknown\n        // to RTCSctpTransport states connecting, connected, closed\n        let state = this.#pc.connectionState;\n        if (state === 'new' || state === 'connecting') {\n            state = 'connecting';\n        } else if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n            state = 'closed';\n        }\n        return state;\n    }\n\n    get transport(): globalThis.RTCDtlsTransport {\n        return this.#transport;\n    }\n}\n"],"names":["RTCDtlsTransport"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,GAAA,EAAA,eAAA,EAAA,UAAA;AAGA,MAAqB,yBAAyB,WAAmD,CAAA;AAAA,EAO7F,YAAY,OAA+D,EAAA;AACvE,IAAM,KAAA,EAAA;AAPV,IAAoC,YAAA,CAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA;AACpC,IAAkB,YAAA,CAAA,IAAA,EAAA,eAAA,EAAA,IAAA,CAAA;AAClB,IAA0C,YAAA,CAAA,IAAA,EAAA,UAAA,EAAA,IAAA,CAAA;AAE1C,IAAgF,aAAA,CAAA,IAAA,EAAA,eAAA,EAAA,IAAA,CAAA;AAI5E,IAAA,YAAA,CAAA,IAAA,EAAK,KAAM,OAAQ,CAAA,EAAA,CAAA;AACnB,IAAA,YAAA,CAAA,IAAA,EAAK,iBAAkB,OAAQ,CAAA,cAAA,CAAA;AAE/B,IAAK,YAAA,CAAA,IAAA,EAAA,UAAA,EAAa,IAAIA,wBAAA,CAAiB,EAAE,EAAA,EAAI,QAAQ,EAAI,EAAA,cAAA,EAAgB,OAAQ,CAAA,cAAA,EAAgB,CAAA,CAAA;AAGjG,IAAK,YAAA,CAAA,IAAA,EAAA,GAAA,CAAA,CAAI,gBAAiB,CAAA,uBAAA,EAAyB,MAAM;AACrD,MAAA,IAAA,CAAK,aAAc,CAAA,IAAI,KAAM,CAAA,aAAa,CAAC,CAAA;AAAA,KAC9C,CAAA;AAGD,IAAK,IAAA,CAAA,gBAAA,CAAiB,aAAe,EAAA,CAAC,CAAM,KAAA;AACxC,MAAA,IAAI,IAAK,CAAA,aAAA,EAAoB,IAAA,CAAA,aAAA,CAAc,CAAC,CAAA;AAAA,KAC/C,CAAA;AAAA;AACL,EAEA,IAAI,WAA6B,GAAA;AAC7B,IAAI,IAAA,IAAA,CAAK,KAAU,KAAA,WAAA,EAAoB,OAAA,IAAA;AACvC,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,GAAA,CAAA,GAAM,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,kBAAqB,GAAA,CAAA;AAAA;AAChE,EAEA,IAAI,cAAyB,GAAA;AACzB,IAAI,IAAA,IAAA,CAAK,KAAU,KAAA,WAAA,EAAoB,OAAA,IAAA;AACvC,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,GAAA,CAAA,GAAM,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,gBAAmB,GAAA,CAAA;AAAA;AAC9D,EAEA,IAAI,KAA0C,GAAA;AAG1C,IAAI,IAAA,KAAA,GAAQ,mBAAK,GAAI,CAAA,CAAA,eAAA;AACrB,IAAI,IAAA,KAAA,KAAU,KAAS,IAAA,KAAA,KAAU,YAAc,EAAA;AAC3C,MAAQ,KAAA,GAAA,YAAA;AAAA,eACD,KAAU,KAAA,cAAA,IAAkB,KAAU,KAAA,QAAA,IAAY,UAAU,QAAU,EAAA;AAC7E,MAAQ,KAAA,GAAA,QAAA;AAAA;AAEZ,IAAO,OAAA,KAAA;AAAA;AACX,EAEA,IAAI,SAAyC,GAAA;AACzC,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,UAAA,CAAA;AAAA;AAEpB;AAjDI,GAAA,GAAA,IAAA,OAAA,EAAA;AACA,eAAA,GAAA,IAAA,OAAA,EAAA;AACA,UAAA,GAAA,IAAA,OAAA,EAAA;;;;"}