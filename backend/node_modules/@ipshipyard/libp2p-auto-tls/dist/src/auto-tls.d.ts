import { serviceCapabilities, serviceDependencies } from '@libp2p/interface';
import type { AutoTLSComponents, AutoTLSInit, AutoTLS as AutoTLSInterface } from './index.js';
import type { AbortOptions } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
interface Certificate {
    key: string;
    cert: string;
    notAfter: Date;
}
export declare class AutoTLS implements AutoTLSInterface {
    private readonly log;
    private readonly components;
    private readonly forgeEndpoint;
    private readonly forgeDomain;
    private readonly acmeDirectory;
    private readonly clientAuth;
    private readonly provisionTimeout;
    private readonly provisionRequestTimeout;
    private readonly renewThreshold;
    private started;
    private shutdownController?;
    certificate?: Certificate;
    private fetching;
    private readonly onSelfPeerUpdate;
    private renewTimeout?;
    private readonly accountPrivateKeyName;
    private readonly accountPrivateKeyBits;
    private readonly certificatePrivateKeyName;
    private readonly certificatePrivateKeyBits;
    private readonly certificateDatastoreKey;
    private readonly email;
    private readonly domain;
    private readonly domainMapper;
    private readonly autoConfirmAddress;
    constructor(components: AutoTLSComponents, init?: AutoTLSInit);
    readonly [Symbol.toStringTag] = "@libp2p/auto-tls";
    readonly [serviceCapabilities]: string[];
    get [serviceDependencies](): string[];
    start(): Promise<void>;
    stop(): Promise<void>;
    private _onSelfPeerUpdate;
    private fetchCertificate;
    private loadOrCreateCertificate;
    private loadCertificateIfExists;
    fetchAcmeCertificate(csr: string, multiaddrs: Multiaddr[], options?: AbortOptions): Promise<string>;
    configureAcmeChallengeResponse(multiaddrs: Multiaddr[], keyAuthorization: string, options?: AbortOptions): Promise<void>;
    private needsRenewal;
}
export {};
//# sourceMappingURL=auto-tls.d.ts.map