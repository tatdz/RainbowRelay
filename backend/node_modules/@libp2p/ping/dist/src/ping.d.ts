import { serviceCapabilities } from '@libp2p/interface';
import type { PingComponents, PingInit, Ping as PingInterface } from './index.js';
import type { AbortOptions, PeerId, Startable, IncomingStreamData } from '@libp2p/interface';
import type { Multiaddr } from '@multiformats/multiaddr';
export declare class Ping implements Startable, PingInterface {
    readonly protocol: string;
    private readonly components;
    private started;
    private readonly timeout;
    private readonly maxInboundStreams;
    private readonly maxOutboundStreams;
    private readonly runOnLimitedConnection;
    private readonly log;
    constructor(components: PingComponents, init?: PingInit);
    readonly [Symbol.toStringTag] = "@libp2p/ping";
    readonly [serviceCapabilities]: string[];
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    /**
     * A handler to register with Libp2p to process ping messages
     */
    handleMessage(data: IncomingStreamData): void;
    /**
     * Ping a given peer and wait for its response, getting the operation latency.
     */
    ping(peer: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<number>;
}
//# sourceMappingURL=ping.d.ts.map