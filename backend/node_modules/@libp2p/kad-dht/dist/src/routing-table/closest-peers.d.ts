import type { RoutingTable } from './index.js';
import type { ComponentLogger, Metrics, PeerId, PeerStore, Startable } from '@libp2p/interface';
export declare const PEER_SET_SIZE = 20;
export declare const REFRESH_INTERVAL = 5000;
export declare const KAD_CLOSE_TAG_NAME = "kad-close";
export declare const KAD_CLOSE_TAG_VALUE = 50;
export interface ClosestPeersInit {
    logPrefix: string;
    routingTable: RoutingTable;
    peerSetSize?: number;
    refreshInterval?: number;
    closeTagName?: string;
    closeTagValue?: number;
}
export interface ClosestPeersComponents {
    peerId: PeerId;
    peerStore: PeerStore;
    metrics?: Metrics;
    logger: ComponentLogger;
}
/**
 * Contains a list of the kad-closest peers encountered on the network.
 *
 * Once every few seconds, if the list has changed, it tags the closest peers.
 */
export declare class ClosestPeers implements Startable {
    private readonly routingTable;
    private readonly components;
    private closestPeers;
    private newPeers?;
    private readonly refreshInterval;
    private readonly peerSetSize;
    private timeout?;
    private readonly closeTagName;
    private readonly closeTagValue;
    private readonly log;
    private running;
    constructor(components: ClosestPeersComponents, init: ClosestPeersInit);
    start(): Promise<void>;
    stop(): void;
    onPeerPing(event: CustomEvent<PeerId>): void;
    updatePeerTags(): Promise<void>;
}
//# sourceMappingURL=closest-peers.d.ts.map