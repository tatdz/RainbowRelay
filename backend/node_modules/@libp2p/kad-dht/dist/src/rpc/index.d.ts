import { Message } from '../message/dht.js';
import type { PeerInfoMapper, Validators } from '../index.js';
import type { PeerRouting } from '../peer-routing/index.js';
import type { Providers } from '../providers.js';
import type { FindNodeHandlerComponents } from './handlers/find-node.js';
import type { GetProvidersHandlerComponents } from './handlers/get-providers.js';
import type { GetValueHandlerComponents } from './handlers/get-value.js';
import type { PutValueHandlerComponents } from './handlers/put-value.js';
import type { RoutingTable } from '../routing-table/index.js';
import type { Metrics, PeerId, IncomingStreamData } from '@libp2p/interface';
export interface DHTMessageHandler {
    handle(peerId: PeerId, msg: Message): Promise<Message | undefined>;
}
export interface RPCInit {
    routingTable: RoutingTable;
    providers: Providers;
    peerRouting: PeerRouting;
    validators: Validators;
    logPrefix: string;
    metricsPrefix: string;
    datastorePrefix: string;
    peerInfoMapper: PeerInfoMapper;
    incomingMessageTimeout?: number;
}
export interface RPCComponents extends GetValueHandlerComponents, PutValueHandlerComponents, FindNodeHandlerComponents, GetProvidersHandlerComponents {
    metrics?: Metrics;
}
export declare class RPC {
    private readonly handlers;
    private readonly log;
    private readonly metrics;
    private readonly incomingMessageTimeout;
    constructor(components: RPCComponents, init: RPCInit);
    /**
     * Process incoming DHT messages
     */
    handleMessage(peerId: PeerId, msg: Message): Promise<Message | undefined>;
    /**
     * Handle incoming streams on the dht protocol
     */
    onIncomingStream(data: IncomingStreamData): void;
}
//# sourceMappingURL=index.d.ts.map