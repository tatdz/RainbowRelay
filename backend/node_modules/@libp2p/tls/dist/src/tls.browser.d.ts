import { serviceCapabilities } from '@libp2p/interface';
import type { MultiaddrConnection, ConnectionEncrypter, SecuredConnection, SecureConnectionOptions } from '@libp2p/interface';
import type { Duplex } from 'it-stream-types';
import type { Uint8ArrayList } from 'uint8arraylist';
export declare class TLS implements ConnectionEncrypter {
    protocol: string;
    constructor();
    readonly [Symbol.toStringTag] = "@libp2p/tls";
    readonly [serviceCapabilities]: string[];
    secureInbound<Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection>(conn: Stream, options?: SecureConnectionOptions): Promise<SecuredConnection<Stream>>;
    secureOutbound<Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection>(conn: Stream, options?: SecureConnectionOptions): Promise<SecuredConnection<Stream>>;
}
//# sourceMappingURL=tls.browser.d.ts.map