/**
 * STUN servers help clients discover their own public IPs.
 *
 * Using five or more servers causes warnings to be printed so
 * ensure we limit it to max x4
 *
 * @see https://gist.github.com/mondain/b0ec1cf5f60ae726202e
 */
export declare const DEFAULT_ICE_SERVERS: string[];
/**
 * Characters that can be present in a ufrag
 */
export declare const UFRAG_ALPHABET: string[];
/**
 * Used to detect the version of the WebRTC Direct connection protocol in use
 */
export declare const UFRAG_PREFIX = "libp2p+webrtc+v1/";
/**
 * The multicodec code for webrtc-direct tuples
 */
export declare const CODEC_WEBRTC_DIRECT = 280;
/**
 * The multicodec code for certhash tuples
 */
export declare const CODEC_CERTHASH = 466;
/**
 * How much can be buffered to the DataChannel at once
 */
export declare const MAX_BUFFERED_AMOUNT: number;
/**
 * How long time we wait for the 'bufferedamountlow' event to be emitted
 */
export declare const BUFFERED_AMOUNT_LOW_TIMEOUT: number;
/**
 * Max message size that can be sent to the DataChannel. In browsers this is
 * 256KiB but go-libp2p and rust-libp2p only support 16KiB at the time of
 * writing.
 *
 * @see https://blog.mozilla.org/webrtc/large-data-channel-messages/
 * @see https://issues.webrtc.org/issues/40644524
 */
export declare const MAX_MESSAGE_SIZE: number;
/**
 * The protobuf message overhead includes the maximum amount of all bytes in the
 * protobuf that aren't message field bytes
 */
export declare const PROTOBUF_OVERHEAD: number;
/**
 * When closing streams we send a FIN then wait for the remote to
 * reply with a FIN_ACK. If that does not happen within this timeout
 * we close the stream anyway.
 */
export declare const FIN_ACK_TIMEOUT = 5000;
/**
 * When sending data messages, if the channel is not in the "open" state, wait
 * this long for the "open" event to fire.
 */
export declare const OPEN_TIMEOUT = 5000;
/**
 * When closing a stream, we wait for `bufferedAmount` to become 0 before
 * closing the underlying RTCDataChannel - this controls how long we wait in ms
 */
export declare const DATA_CHANNEL_DRAIN_TIMEOUT = 30000;
/**
 * Set as the 'negotiated' muxer protocol name
 */
export declare const MUXER_PROTOCOL = "/webrtc";
/**
 * The protocol used for the signalling stream protocol
 */
export declare const SIGNALING_PROTOCOL = "/webrtc-signaling/0.0.1";
/**
 * Used to store generated certificates in the datastore
 */
export declare const DEFAULT_CERTIFICATE_DATASTORE_KEY = "/libp2p/webrtc-direct/certificate";
/**
 * Used to store the certificate private key in the keychain
 */
export declare const DEFAULT_CERTIFICATE_PRIVATE_KEY_NAME = "webrtc-direct-certificate-private-key";
/**
 * The default type of certificate private key
 */
export declare const DEFAULT_CERTIFICATE_PRIVATE_KEY_TYPE = "ECDSA";
/**
 * How long the certificate is valid for
 */
export declare const DEFAULT_CERTIFICATE_LIFESPAN = 1209600000;
/**
 * Renew the certificate this long before it expires
 */
export declare const DEFAULT_CERTIFICATE_RENEWAL_THRESHOLD = 86400000;
//# sourceMappingURL=constants.d.ts.map