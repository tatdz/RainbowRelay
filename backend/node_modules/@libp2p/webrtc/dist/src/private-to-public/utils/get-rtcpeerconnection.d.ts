import { PeerConnection } from '@ipshipyard/node-datachannel';
import { RTCPeerConnection } from '@ipshipyard/node-datachannel/polyfill';
import type { TransportCertificate } from '../../index.js';
import type { CertificateFingerprint } from '@ipshipyard/node-datachannel';
interface DirectRTCPeerConnectionInit extends RTCConfiguration {
    ufrag: string;
    peerConnection: PeerConnection;
}
export declare class DirectRTCPeerConnection extends RTCPeerConnection {
    private readonly peerConnection;
    private readonly ufrag;
    constructor(init: DirectRTCPeerConnectionInit);
    createOffer(): Promise<globalThis.RTCSessionDescriptionInit | any>;
    createAnswer(): Promise<globalThis.RTCSessionDescriptionInit | any>;
    remoteFingerprint(): CertificateFingerprint;
}
export declare function createDialerRTCPeerConnection(role: 'client' | 'server', ufrag: string, rtcConfiguration?: RTCConfiguration | (() => RTCConfiguration | Promise<RTCConfiguration>), certificate?: TransportCertificate): Promise<DirectRTCPeerConnection>;
export {};
//# sourceMappingURL=get-rtcpeerconnection.d.ts.map