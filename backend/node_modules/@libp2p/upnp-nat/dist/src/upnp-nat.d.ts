import { serviceCapabilities, serviceDependencies } from '@libp2p/interface';
import type { UPnPNATComponents, UPnPNATInit, UPnPNAT as UPnPNATInterface } from './index.js';
import type { Gateway, UPnPNAT as UPnPNATClient } from '@achingbrain/nat-port-mapper';
import type { Startable } from '@libp2p/interface';
import type { TypedEventTarget } from 'main-event';
export interface GatewayFinderEvents {
    gateway: CustomEvent<Gateway>;
}
export interface GatewayFinder extends TypedEventTarget<GatewayFinderEvents> {
}
export declare class UPnPNAT implements Startable, UPnPNATInterface {
    private readonly log;
    private readonly components;
    private readonly init;
    private started;
    portMappingClient: UPnPNATClient;
    private shutdownController?;
    private readonly mapIpAddressesDebounced;
    private readonly gatewayFinder;
    private readonly portMappers;
    private readonly autoConfirmAddress;
    constructor(components: UPnPNATComponents, init: UPnPNATInit);
    readonly [Symbol.toStringTag] = "@libp2p/upnp-nat";
    readonly [serviceCapabilities]: string[];
    get [serviceDependencies](): string[];
    isStarted(): boolean;
    start(): Promise<void>;
    /**
     * Stops the NAT manager
     */
    stop(): Promise<void>;
    onGatewayDiscovered(event: CustomEvent<Gateway>): void;
    mapIpAddresses(): Promise<void>;
}
//# sourceMappingURL=upnp-nat.d.ts.map