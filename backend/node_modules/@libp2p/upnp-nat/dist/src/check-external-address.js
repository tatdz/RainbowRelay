import { NotStartedError, start, stop } from '@libp2p/interface';
import { repeatingTask } from '@libp2p/utils/repeating-task';
import pDefer from 'p-defer';
import { raceSignal } from 'race-signal';
/**
 * Monitors the external network address and notifies when/if it changes
 */
class ExternalAddressChecker {
    log;
    gateway;
    started;
    lastPublicIp;
    lastPublicIpPromise;
    check;
    onExternalAddressChange;
    constructor(components, init) {
        this.log = components.logger.forComponent('libp2p:upnp-nat:external-address-check');
        this.gateway = components.gateway;
        this.onExternalAddressChange = init.onExternalAddressChange;
        this.started = false;
        this.checkExternalAddress = this.checkExternalAddress.bind(this);
        this.check = repeatingTask(this.checkExternalAddress, init.interval ?? 30000, {
            timeout: init.timeout ?? 10000,
            runImmediately: true
        });
    }
    async start() {
        if (this.started) {
            return;
        }
        await start(this.check);
        this.started = true;
    }
    async stop() {
        await stop(this.check);
        this.started = false;
    }
    /**
     * Return the last public IP address we found, or wait for it to be found
     */
    async getPublicIp(options) {
        if (!this.started) {
            throw new NotStartedError('Not started yet');
        }
        if (this.lastPublicIp != null) {
            return this.lastPublicIp;
        }
        this.lastPublicIpPromise = pDefer();
        return raceSignal(this.lastPublicIpPromise.promise, options?.signal, {
            errorMessage: 'Requesting the public IP from the network gateway timed out - UPnP may not be enabled'
        });
    }
    async checkExternalAddress(options) {
        try {
            const externalAddress = await this.gateway.externalIp(options);
            // check if our public address has changed
            if (this.lastPublicIp != null && externalAddress !== this.lastPublicIp) {
                this.log('external address changed from %s to %s', this.lastPublicIp, externalAddress);
                // notify listeners that the address has changed
                this.onExternalAddressChange?.(externalAddress);
            }
            this.lastPublicIp = externalAddress;
            this.lastPublicIpPromise?.resolve(externalAddress);
        }
        catch (err) {
            this.log.error('could not resolve external address - %e', err);
            if (this.lastPublicIp != null) {
                // ignore the error if we've previously run successfully
                return;
            }
            this.lastPublicIpPromise?.reject(err);
        }
    }
}
export function dynamicExternalAddress(components, init) {
    return new ExternalAddressChecker(components, init);
}
export function staticExternalAddress(address) {
    return {
        getPublicIp: () => address
    };
}
//# sourceMappingURL=check-external-address.js.map