import { TypedEventEmitter } from 'main-event';
export class StaticGatewayFinder extends TypedEventEmitter {
    log;
    gatewayUrls;
    gateways;
    portMappingClient;
    started;
    constructor(components, init) {
        super();
        this.log = components.logger.forComponent('libp2p:upnp-nat:static-gateway-finder');
        this.portMappingClient = init.portMappingClient;
        this.started = false;
        this.gateways = [];
        this.gatewayUrls = init.gateways.map(url => new URL(url));
    }
    async start() {
        this.started = true;
    }
    async afterStart() {
        for (const url of this.gatewayUrls) {
            try {
                this.log('fetching gateway descriptor from %s', url);
                const gateway = await this.portMappingClient.getGateway(url);
                if (!this.started) {
                    return;
                }
                this.log('found static gateway at %s', url);
                this.gateways.push(gateway);
                this.safeDispatchEvent('gateway', {
                    detail: gateway
                });
            }
            catch (err) {
                this.log.error('could not contact static gateway at %s - %e', url, err);
            }
        }
    }
    async stop() {
        this.started = false;
    }
}
//# sourceMappingURL=static-gateway-finder.js.map