/**
 * @packageDocumentation
 *
 * {@link http} implements the WHATWG [Fetch
 * api](https://fetch.spec.whatwg.org). It can be used as a drop in replacement
 * for the browser's fetch function. It supports http, https, and multiaddr
 * URIs. Use HTTP in p2p networks.
 *
 * @example
 *
 * See the `examples/` for full examples of how to use the HTTP service.
 *
 * ```typescript
 * import { createLibp2p } from 'libp2p'
 * import { http } from '@libp2p/http-fetch'
 *
 * const node = await createLibp2p({
 *     // other options ...
 *     services: {
 *       http: http()
 *     }
 * })
 *
 * await node.start()
 *
 * // Make an http request to a libp2p peer
 * let resp = await node.services.http.fetch('multiaddr:/dns4/localhost/tcp/1234')
 *
 * // Or a traditional HTTP request
 * resp = await node.services.http.fetch('multiaddr:/dns4/example.com/tcp/443/tls/http')
 *
 * // And of course, you can use the fetch API as you normally would
 * resp = await node.services.http.fetch('https://example.com')
 *
 * // This gives you the accessibility of the fetch API with the flexibility of
 * // using a p2p network.
 * ```
 */
import { WHATWGFetch } from './whatwg-fetch-service.js';
export { WELL_KNOWN_PROTOCOLS } from './constants.js';
/**
 * Create an HTTP service that provides a `fetch` implementation and a way to
 * register custom HTTP handlers.
 */
export function http(init = {}) {
    return (components) => new WHATWGFetch(components, init);
}
/**
 * Start an HTTP service with a custom HTTP handler that is responsible for
 * handling all HTTP requests and routing appropriately.
 *
 * Most users should use the `http` function and register their own protocols
 * with `.handleHTTPProtocol`.
 */
export function httpCustomServer(init) {
    return (components) => new WHATWGFetch(components, init);
}
//# sourceMappingURL=index.js.map