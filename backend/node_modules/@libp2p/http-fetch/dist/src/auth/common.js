import * as varint from 'uint8-varint';
export const PeerIDAuthScheme = 'libp2p-PeerID';
export const HTTPPeerIDAuthProto = '/http-peer-id-auth/1.0.0';
export async function sign(key, prefix, partsToSign) {
    const dataToSign = genDataToSign(prefix, partsToSign);
    return key.sign(dataToSign);
}
export async function verify(key, prefix, partsToSign, sig) {
    const dataToSign = genDataToSign(prefix, partsToSign);
    return key.verify(dataToSign, sig);
}
export function encodeAuthParams(params) {
    const encodedParams = Object.entries(params)
        .map(([key, value]) => `${key}="${value}"`)
        .join(', ');
    return `${PeerIDAuthScheme} ${encodedParams}`;
}
const textEncoder = new TextEncoder();
function sizeOfPart([k, v]) {
    return k.length + 1 + v.length; // key + '=' + value
}
function genDataToSign(prefix, partsToSign) {
    // Sort the parts
    partsToSign.sort((a, b) => a[0].localeCompare(b[0]));
    const size = partsToSign.reduce((acc, p) => acc + varint.encodingLength(sizeOfPart(p)) + sizeOfPart(p), prefix.length);
    const out = new Uint8Array(size);
    let offset = 0;
    const res = textEncoder.encodeInto(prefix, out);
    offset += res.written;
    for (const [k, v] of partsToSign) {
        const len = sizeOfPart([k, v]);
        varint.encodeUint8Array(len, out, offset);
        offset += varint.encodingLength(len);
        let res = textEncoder.encodeInto(k, out.subarray(offset));
        offset += res.written;
        res = textEncoder.encodeInto('=', out.subarray(offset));
        offset += res.written;
        if (typeof v === 'string') {
            res = textEncoder.encodeInto(v, out.subarray(offset));
            offset += res.written;
        }
        else {
            out.set(v, offset);
            offset += v.length;
        }
    }
    return out;
}
const maxAuthHeaderSize = 2048;
export function parseHeader(headerVal) {
    if (headerVal.length > maxAuthHeaderSize) {
        throw new Error('header too long');
    }
    if (!headerVal.includes(PeerIDAuthScheme)) {
        throw new Error('no peer id auth scheme found');
    }
    const rest = headerVal.substring(PeerIDAuthScheme.length).trim();
    const params = {};
    const regex = /(\w[^=]+)="([^"]+)"/g;
    let match;
    while ((match = regex.exec(rest)) !== null) {
        params[match[1]] = match[2];
    }
    return params;
}
//# sourceMappingURL=common.js.map