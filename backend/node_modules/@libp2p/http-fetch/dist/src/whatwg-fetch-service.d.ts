import { type PeerId, type Startable } from '@libp2p/interface';
import { type Multiaddr } from '@multiformats/multiaddr';
import { type ProtosMap } from './well-known-handler.js';
import type { CustomHTTPHandlerInit, FetchComponents, HTTPInit, HTTP as WHATWGFetchInterface } from './index.js';
export type { ProtosMap } from './well-known-handler.js';
type ProtocolID = string;
export declare class WHATWGFetch implements Startable, WHATWGFetchInterface {
    private readonly log;
    readonly protocol: string;
    private readonly components;
    private started;
    private readonly _fetch;
    private readonly customHTTPHandler?;
    private readonly wellKnownProtosCache;
    private readonly wellKnownHandler;
    private readonly myProtosSortedByLength;
    private readonly protoHandlers;
    _hasCustomHandler(h: HTTPInit | CustomHTTPHandlerInit): h is CustomHTTPHandlerInit;
    constructor(components: FetchComponents, init: HTTPInit | (HTTPInit & CustomHTTPHandlerInit));
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    private handleMessage;
    private defaultMuxer;
    serveWellKnownProtocols(req: Request): Promise<Response>;
    fetch(request: string | Request, requestInit?: RequestInit): Promise<Response>;
    private innerFetch;
    private isHTTPTransportMultiaddr;
    registerProtocol(protocol: string, path: string): void;
    handleHTTPProtocol(protocol: ProtocolID, path: string, handler: (req: Request) => Promise<Response>): void;
    getPeerMeta(peerOrMultiaddr: PeerId | Multiaddr): Promise<ProtosMap>;
    prefixForProtocol(peer: PeerId | Multiaddr, protocol: string): Promise<string>;
}
//# sourceMappingURL=whatwg-fetch-service.d.ts.map