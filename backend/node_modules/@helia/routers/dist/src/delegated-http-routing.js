import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client';
import { NotFoundError } from '@libp2p/interface';
import { marshalIPNSRecord, multihashFromIPNSRoutingKey, unmarshalIPNSRecord } from 'ipns';
import first from 'it-first';
import map from 'it-map';
import { CID } from 'multiformats/cid';
import { equals as uint8ArrayEquals } from 'uint8arrays/equals';
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
import { delegatedHTTPRoutingDefaults } from './utils/delegated-http-routing-defaults.js';
const IPNS_PREFIX = uint8ArrayFromString('/ipns/');
function isIPNSKey(key) {
    return uint8ArrayEquals(key.subarray(0, IPNS_PREFIX.byteLength), IPNS_PREFIX);
}
class DelegatedHTTPRouter {
    client;
    constructor(url, init = {}) {
        this.client = createDelegatedRoutingV1HttpApiClient(url, init);
    }
    async provide(cid, options) {
        // noop
    }
    async cancelReprovide(cid, options) {
        // noop
    }
    async *findProviders(cid, options) {
        yield* map(this.client.getProviders(cid, options), (record) => {
            return {
                id: record.ID,
                multiaddrs: record.Addrs,
                protocols: record.Protocols
            };
        });
    }
    async put(key, value, options) {
        if (!isIPNSKey(key)) {
            return;
        }
        const digest = multihashFromIPNSRoutingKey(key);
        const cid = CID.createV1(0x72, digest);
        const record = unmarshalIPNSRecord(value);
        await this.client.putIPNS(cid, record, options);
    }
    async get(key, options) {
        if (!isIPNSKey(key)) {
            throw new NotFoundError('Not found');
        }
        const digest = multihashFromIPNSRoutingKey(key);
        const cid = CID.createV1(0x72, digest);
        try {
            const record = await this.client.getIPNS(cid, options);
            return marshalIPNSRecord(record);
        }
        catch (err) {
            // BadResponseError is thrown when the response had no body, which means
            // the record couldn't be found
            if (err.name === 'BadResponseError') {
                throw new NotFoundError('Not found');
            }
            throw err;
        }
    }
    async findPeer(peerId, options) {
        const peer = await first(this.client.getPeers(peerId, options));
        if (peer != null) {
            return {
                id: peer.ID,
                multiaddrs: peer.Addrs ?? []
            };
        }
        throw new NotFoundError('Not found');
    }
    async *getClosestPeers(key, options) {
        // noop
    }
}
/**
 * Creates a Helia Router that connects to an endpoint that supports the [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) spec.
 */
export function delegatedHTTPRouting(url, init) {
    const config = init ?? delegatedHTTPRoutingDefaults();
    return new DelegatedHTTPRouter(new URL(url), config);
}
//# sourceMappingURL=delegated-http-routing.js.map