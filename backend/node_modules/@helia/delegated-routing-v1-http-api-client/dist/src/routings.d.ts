import { CID } from 'multiformats/cid';
import type { DelegatedRoutingV1HttpApiClient } from './index.js';
import type { ContentRouting, PeerRouting, AbortOptions, PeerId, PeerInfo } from '@libp2p/interface';
/**
 * Wrapper class to convert [http-routing-v1 content events](https://specs.ipfs.tech/routing/http-routing-v1/#response-body) into returned values
 */
export declare class DelegatedRoutingV1HttpApiClientContentRouting implements ContentRouting {
    private readonly client;
    constructor(client: DelegatedRoutingV1HttpApiClient);
    findProviders(cid: CID, options?: AbortOptions): AsyncIterable<PeerInfo>;
    provide(): Promise<void>;
    cancelReprovide(): Promise<void>;
    put(key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void>;
    get(key: Uint8Array, options?: AbortOptions): Promise<Uint8Array>;
}
/**
 * Wrapper class to convert [http-routing-v1](https://specs.ipfs.tech/routing/http-routing-v1/#response-body-0) events into expected libp2p values
 */
export declare class DelegatedRoutingV1HttpApiClientPeerRouting implements PeerRouting {
    private readonly client;
    constructor(client: DelegatedRoutingV1HttpApiClient);
    findPeer(peerId: PeerId, options?: AbortOptions): Promise<PeerInfo>;
    getClosestPeers(key: Uint8Array, options?: AbortOptions): AsyncIterable<PeerInfo>;
}
//# sourceMappingURL=routings.d.ts.map