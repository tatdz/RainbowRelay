/**
 * @packageDocumentation
 *
 * A client implementation of the IPFS [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) that can be used to interact with any compliant server implementation.
 *
 * @example
 *
 * ```typescript
 * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'
 * import { CID } from 'multiformats/cid'
 *
 * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')
 *
 * for await (const prov of getProviders(CID.parse('QmFoo'))) {
 *   // ...
 * }
 * ```
 *
 * ### How to use with libp2p
 *
 * The client can be configured as a libp2p service, this will enable it as both a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.content_routing.ContentRouting.html | ContentRouting} and a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.peer_routing.PeerRouting.html | PeerRouting} implementation
 *
 * @example
 *
 * ```typescript
 * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'
 * import { createLibp2p } from 'libp2p'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')
 * const libp2p = await createLibp2p({
 *   // other config here
 *   services: {
 *     delegatedRouting: client
 *   }
 * })
 *
 * // later this will use the configured HTTP gateway
 * await libp2p.peerRouting.findPeer(peerIdFromString('QmFoo'))
 * ```
 *
 * ### Caching
 *
 * By default, the client caches successful (200) delegated routing responses in browser environments (that support the [Cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache)) for a duration of 5 minutes. The client does this by adding an `x-cache-expires` header to the response object.
 *
 * If caching is enabled, the client will cache responses for the duration of `cacheTTL` milliseconds.
 * If `cacheTTL` is 0, caching is disabled:
 *
 * @example
 *
 * ```typescript
 * // disable caching
 * const client = createDelegatedRoutingV1HttpApiClient('https://example.org', { cacheTTL: 0 })
 * ```
 *
 * ### Filtering with IPIP-484
 *
 * The client can be configured to pass filter options to the delegated routing server as defined in IPIP-484.
 * The filter options be set globally, by passing them to the client constructor, or on a per-request basis.
 *
 * @see https://github.com/ipfs/specs/pull/484
 *
 * @example
 *
 * ```typescript
 * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'
 * import { createLibp2p } from 'libp2p'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * // globally set filter options
 * const client = createDelegatedRoutingV1HttpApiClient('https://delegated-ipfs.dev', {
 *   filterProtocols: ['transport-bitswap', 'unknown', 'transport-ipfs-gateway-http'],
 *   filterAddrs: ['webtransport', 'webrtc-direct', 'wss']
 * })
 *
 * // per-request filter options
 * for await (const prov of getProviders(CID.parse('bafy'), {
 *   filterProtocols: ['transport-ipfs-gateway-http'],
 *   filterAddrs: ['!p2p-circuit']
 * })) {
 *   // ...
 * }
 * ```
 */
import { DefaultDelegatedRoutingV1HttpApiClient } from './client.js';
/**
 * Create and return a client to use with a Routing V1 HTTP API server
 */
export function createDelegatedRoutingV1HttpApiClient(url, init = {}) {
    return new DefaultDelegatedRoutingV1HttpApiClient(new URL(url), init);
}
//# sourceMappingURL=index.js.map