import type { TrustlessGatewayBlockBrokerInit, TrustlessGatewayBlockBrokerComponents, TrustlessGatewayGetBlockProgressEvents } from './index.js';
import type { TransformRequestInit } from './trustless-gateway.js';
import type { BlockRetrievalOptions, BlockBroker, CreateSessionOptions } from '@helia/interface';
import type { CID } from 'multiformats/cid';
export interface CreateTrustlessGatewaySessionOptions extends CreateSessionOptions<TrustlessGatewayGetBlockProgressEvents> {
    /**
     * By default we will only connect to peers with HTTPS addresses, pass true
     * to also connect to HTTP addresses.
     *
     * @default false
     */
    allowInsecure?: boolean;
    /**
     * By default we will only connect to peers with public or DNS addresses, pass
     * true to also connect to private addresses.
     *
     * @default false
     */
    allowLocal?: boolean;
    /**
     * Provide a function that will be called before querying trustless-gateways. This lets you modify the fetch options to pass custom headers or other necessary things.
     */
    transformRequestInit?: TransformRequestInit;
}
/**
 * A class that accepts a list of trustless gateways that are queried
 * for blocks.
 */
export declare class TrustlessGatewayBlockBroker implements BlockBroker<TrustlessGatewayGetBlockProgressEvents> {
    private readonly allowInsecure;
    private readonly allowLocal;
    private readonly transformRequestInit?;
    private readonly routing;
    private readonly log;
    private readonly logger;
    constructor(components: TrustlessGatewayBlockBrokerComponents, init?: TrustlessGatewayBlockBrokerInit);
    retrieve(cid: CID, options?: BlockRetrievalOptions<TrustlessGatewayGetBlockProgressEvents>): Promise<Uint8Array>;
    createSession(options?: CreateTrustlessGatewaySessionOptions): BlockBroker<TrustlessGatewayGetBlockProgressEvents>;
}
//# sourceMappingURL=broker.d.ts.map