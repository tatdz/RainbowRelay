import { TrustlessGateway } from './trustless-gateway.js';
import type { TransformRequestInit } from './trustless-gateway.js';
import type { Routing } from '@helia/interface';
import type { ComponentLogger, Logger } from '@libp2p/interface';
import type { AbortOptions, Multiaddr } from '@multiformats/multiaddr';
import type { CID } from 'multiformats/cid';
export declare function filterNonHTTPMultiaddrs(multiaddrs: Multiaddr[], allowInsecure: boolean, allowLocal: boolean): Multiaddr[];
export interface FindHttpGatewayProvidersOptions extends AbortOptions {
    transformRequestInit?: TransformRequestInit;
}
export declare function findHttpGatewayProviders(cid: CID, routing: Routing, logger: ComponentLogger, allowInsecure: boolean, allowLocal: boolean, options?: FindHttpGatewayProvidersOptions): AsyncGenerator<TrustlessGateway>;
interface LimitedResponseOptions {
    signal?: AbortSignal;
    log?: Logger;
}
/**
 * A function that handles ensuring the content-length header and the response body is less than a given byte limit.
 *
 * If the response contains a content-length header greater than the limit or the actual bytes returned are greater than
 * the limit, an error is thrown.
 */
export declare function limitedResponse(response: Response, byteLimit: number, options?: LimitedResponseOptions): Promise<Uint8Array>;
export {};
//# sourceMappingURL=utils.d.ts.map